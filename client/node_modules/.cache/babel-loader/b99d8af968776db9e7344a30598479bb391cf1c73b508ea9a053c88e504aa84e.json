{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week5\\\\hw3\\\\client\\\\src\\\\components\\\\CreateArea.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useResource } from \"react-request-hook\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateArea(props) {\n  _s();\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n  const [post, createPost] = useResource(({\n    title,\n    content,\n    createdDate,\n    isCompleted,\n    completedDate\n  }) => ({\n    url: \"/posts\",\n    method: \"post\",\n    data: {\n      title,\n      content,\n      createdDate,\n      isCompleted,\n      completedDate\n    }\n  }));\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setNote(prevNote => {\n      return {\n        ...prevNote,\n        [name]: value\n      };\n    });\n  }\n  function submitNote(event) {\n    event.preventDefault(); // Prevent form from submitting right away\n    const newNote = {\n      title: note.title,\n      content: note.content,\n      createdDate: new Date().toLocaleString(),\n      isCompleted: false,\n      completedDate: null\n    };\n\n    // Create the note in the backend and then update the UI\n    createPost(newNote).then(response => {\n      // This ensures that we only add the note to the UI if the POST was successful\n      props.onAdd(response.data);\n      setNote({\n        title: \"\",\n        content: \"\"\n      });\n    }).catch(error => {\n      // Handle the error here, perhaps show a message to the user\n      console.error(\"There was an error creating the post\", error);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"title\",\n        onChange: handleChange,\n        value: note.title,\n        placeholder: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"content\",\n        onChange: handleChange,\n        value: note.content,\n        placeholder: \"Take a note...\",\n        rows: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitNote,\n        disabled: !note.title,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateArea, \"m7TVmqy56Rn9X9mCm3VDK9W+2Tw=\", false, function () {\n  return [useResource];\n});\n_c = CreateArea;\nexport default CreateArea;\nvar _c;\n$RefreshReg$(_c, \"CreateArea\");","map":{"version":3,"names":["React","useState","useResource","jsxDEV","_jsxDEV","CreateArea","props","_s","note","setNote","title","content","post","createPost","createdDate","isCompleted","completedDate","url","method","data","handleChange","event","name","value","target","prevNote","submitNote","preventDefault","newNote","Date","toLocaleString","then","response","onAdd","catch","error","console","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week5/hw3/client/src/components/CreateArea.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useResource } from \"react-request-hook\";\n\nfunction CreateArea(props) {\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  const [post, createPost] = useResource(({ title, content, createdDate, isCompleted, completedDate }) => ({\n    url: \"/posts\",\n    method: \"post\",\n    data: { title, content, createdDate, isCompleted, completedDate },\n  }));\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setNote(prevNote => {\n      return {\n        ...prevNote,\n        [name]: value\n      };\n    });\n  }\n\n  function submitNote(event) {\n    event.preventDefault(); // Prevent form from submitting right away\n    const newNote = {\n      title: note.title,\n      content: note.content,\n      createdDate: new Date().toLocaleString(),\n      isCompleted: false,\n      completedDate: null\n    };\n  \n    // Create the note in the backend and then update the UI\n    createPost(newNote)\n      .then(response => {\n        // This ensures that we only add the note to the UI if the POST was successful\n        props.onAdd(response.data);\n        setNote({\n          title: \"\",\n          content: \"\"\n        });\n      })\n      .catch(error => {\n        // Handle the error here, perhaps show a message to the user\n        console.error(\"There was an error creating the post\", error);\n      });\n  }\n\n  return (\n    <div>\n      <form>\n        <input\n          name=\"title\"\n          onChange={handleChange}\n          value={note.title}\n          placeholder=\"Title\"\n        />\n        <textarea\n          name=\"content\"\n          onChange={handleChange}\n          value={note.content}\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n        />\n        <button onClick={submitNote} disabled={!note.title}>Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}