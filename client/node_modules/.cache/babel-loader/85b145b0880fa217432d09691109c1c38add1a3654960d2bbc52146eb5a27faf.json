{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week5\\\\hw3\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useState, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { userAndViewReducer, notesReducer, mockDBReducer } from './auxiliary/Reducer';\nimport { StateContext } from './auxiliary/Context';\nimport { addNote, deleteNote, editNote, toggleNote } from \"./auxiliary/Action\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport HomePage from \"./pages/HomePage\";\n\n//we need to remove the hard code here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  user: null,\n  posts: [],\n  currentView: 'login',\n  //Store registered users in the database\n  mockDB: []\n};\nexport default function App() {\n  _s();\n  //1. we need to use useResource to set up our url and posts\n  const [postResponse, getPosts] = useResource(() => ({\n    url: \"/posts\",\n    method: \"get\"\n  }));\n\n  //Requesting posts during component loading\n  //Empty dependency array ensures that it only runs \n  //when the component is mounted\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  //UseEffect itself does not directly render any interface. \n  //It is a side effect hook used to handle the logic of component loading, updating, and unloading.\n  //Obtain posts data from the backend. After the data is successfully loaded from the backend, \n  //useEffect uses dispatch to update the application status, \n  //so we will see the note loop traversing our initial data on the homepage interface\n  useEffect(() => {\n    if (postResponse && postResponse.data) {\n      console.log(postResponse.data);\n      dispatch({\n        type: \"FETCH_POSTS\",\n        posts: postResponse.data.reverse()\n      });\n    }\n  }, [postResponse]);\n  const mainReducer = (state, action) => {\n    const updatedUserAndView = userAndViewReducer(state, action);\n    return {\n      ...updatedUserAndView,\n      posts: notesReducer(state.posts, action),\n      mockDB: mockDBReducer(state.mockDB, action)\n    };\n  };\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n  const {\n    user,\n    posts: notes,\n    currentView\n  } = state;\n\n  //Modal Window Status\n  const [showModal, setShowModal] = useState(false);\n\n  //Use useEffect to check for changes in user status\n  useEffect(() => {\n    if (user) {\n      setShowModal(true);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), currentView === 'login' && /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }, this), currentView === 'register' && /*#__PURE__*/_jsxDEV(RegisterPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 40\n      }, this), currentView === 'homepage' && /*#__PURE__*/_jsxDEV(HomePage, {\n        notes: notes,\n        addNote: note => dispatch(addNote(note)),\n        deleteNote: id => dispatch(deleteNote(id)),\n        editNote: attributes => dispatch(editNote(attributes)),\n        toggleNote: id => dispatch(toggleNote(id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 40\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [\"Welcome back, \", user.name, \"!\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowModal(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n/**\n  \n    dispatch(loginUser(user.name)); 这个代码在loginpage中，注意假设这个函数被调用\n    首先，从usecontext全局那里拿到state dispatch，然后这个dispatch(setView('homepage'))来源于reducer.jsx\n    当调用的时候，会触及这个const [state, dispatch] = useReducer(mainReducer, initialState);也就是会来源于mainreducer\n    传入当前的状态和刚才 dispatch 的 action。\n    子 reducer 被调用：\n    mainReducer 会分别调用 userAndViewReducer、notesReducer 和 mockDBReducer，每个子 reducer 都处理它们各自负责的状态部分。\n     状态被更新：\n    userAndViewReducer 可能会返回更新了 user 或 currentView 的状态部分。\n    notesReducer 根据 action 和 state.posts 返回更新后的帖子列表。\n    mockDBReducer 根据 action 和 state.mockDB 返回更新后的模拟数据库状态。\n     新的状态对象被组合：\n    mainReducer 会将所有子 reducer 返回的结果合并为一个新的状态对象，并将其返回给 React。React 随后会使用这个新状态对象来重新渲染 UI。\n */\n_s(App, \"baISZrpom8ykxwaZTVTKKGzMbOg=\", false, function () {\n  return [useResource];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useReducer","useState","useEffect","useResource","userAndViewReducer","notesReducer","mockDBReducer","StateContext","addNote","deleteNote","editNote","toggleNote","Header","Footer","LoginPage","RegisterPage","HomePage","jsxDEV","_jsxDEV","initialState","user","posts","currentView","mockDB","App","_s","postResponse","getPosts","url","method","data","console","log","dispatch","type","reverse","mainReducer","state","action","updatedUserAndView","notes","showModal","setShowModal","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","note","id","attributes","className","name","onClick","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week5/hw3/client/src/App.jsx"],"sourcesContent":["import React, {useReducer, useState, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { userAndViewReducer, notesReducer, mockDBReducer } from './auxiliary/Reducer';\nimport { StateContext } from './auxiliary/Context'\nimport { addNote, deleteNote, editNote, toggleNote } from \"./auxiliary/Action\"; \nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\"; \nimport HomePage from \"./pages/HomePage\";\n\n//we need to remove the hard code here\nexport const initialState = {\n  user: null,\n  posts: [],\n  currentView: 'login',\n  //Store registered users in the database\n  mockDB: []\n};\n\n\nexport default function App() {\n\n  //1. we need to use useResource to set up our url and posts\n  const [postResponse, getPosts] = useResource(() => ({\n    url: \"/posts\",\n    method: \"get\",\n  })); \n  \n  //Requesting posts during component loading\n  //Empty dependency array ensures that it only runs \n  //when the component is mounted\n  useEffect(() => {\n    getPosts();\n  }, []);\n  \n  //UseEffect itself does not directly render any interface. \n  //It is a side effect hook used to handle the logic of component loading, updating, and unloading.\n  //Obtain posts data from the backend. After the data is successfully loaded from the backend, \n  //useEffect uses dispatch to update the application status, \n  //so we will see the note loop traversing our initial data on the homepage interface\n  useEffect(() => {\n    if (postResponse && postResponse.data) {\n      console.log(postResponse.data); \n      dispatch({ type: \"FETCH_POSTS\", posts: postResponse.data.reverse() });\n    }\n  }, [postResponse]);\n\n\n\n  const mainReducer = (state, action) => {\n    const updatedUserAndView = userAndViewReducer(state, action);\n    return {\n      ...updatedUserAndView,\n      posts: notesReducer(state.posts, action),\n      mockDB: mockDBReducer(state.mockDB, action),\n    };\n  };\n\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n\n  const { user, posts: notes, currentView } = state;\n\n  //Modal Window Status\n  const [showModal, setShowModal] = useState(false);\n\n  //Use useEffect to check for changes in user status\n  useEffect(() => {\n    if (user) {\n      setShowModal(true);\n    }\n  }, [user]);\n\n\n  return(\n    <div>\n      <StateContext.Provider value={{ state, dispatch }}>\n\n        <Header />\n        {currentView === 'login' && <LoginPage />}\n        {currentView === 'register' && <RegisterPage />}\n        {currentView === 'homepage' && <HomePage \n          notes={notes} \n          addNote={(note) => dispatch(addNote(note))}\n          deleteNote={(id) => dispatch(deleteNote(id))}\n          editNote={(attributes) => dispatch(editNote(attributes))}\n          toggleNote={(id) => dispatch(toggleNote(id))}\n        />}\n        <Footer />\n\n        {/* New Modal Window */}\n        {showModal && (\n          <div className=\"modal\">\n            <div className=\"modal-content\">\n              Welcome back, {user.name}!\n              <button onClick={() => setShowModal(false)}>Close</button>\n            </div>\n          </div>\n        )}\n\n      </StateContext.Provider>\n    </div>\n  )\n}\n\n\n  /**\n    \n      dispatch(loginUser(user.name)); 这个代码在loginpage中，注意假设这个函数被调用\n      首先，从usecontext全局那里拿到state dispatch，然后这个dispatch(setView('homepage'))来源于reducer.jsx\n      当调用的时候，会触及这个const [state, dispatch] = useReducer(mainReducer, initialState);也就是会来源于mainreducer\n      传入当前的状态和刚才 dispatch 的 action。\n      子 reducer 被调用：\n      mainReducer 会分别调用 userAndViewReducer、notesReducer 和 mockDBReducer，每个子 reducer 都处理它们各自负责的状态部分。\n\n      状态被更新：\n      userAndViewReducer 可能会返回更新了 user 或 currentView 的状态部分。\n      notesReducer 根据 action 和 state.posts 返回更新后的帖子列表。\n      mockDBReducer 根据 action 和 state.mockDB 返回更新后的模拟数据库状态。\n\n      新的状态对象被组合：\n      mainReducer 会将所有子 reducer 返回的结果合并为一个新的状态对象，并将其返回给 React。React 随后会使用这个新状态对象来重新渲染 UI。\n   */\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}