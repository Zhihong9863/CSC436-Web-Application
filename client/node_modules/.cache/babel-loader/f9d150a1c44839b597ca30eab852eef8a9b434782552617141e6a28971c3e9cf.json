{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week5\\\\hw3\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RequestProvider } from 'react-request-hook';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:4000/api/'\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(RequestProvider, {\n    value: axiosInstance,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 13,\n  columnNumber: 3\n}, this));\n\n/**\n   1.前端开发服务器监听 http://localhost:3000。即React 应用在浏览器中通过这个地址访问。\n\n   2.当 React 应用需要与后端 API 交互时，会向 /api 路径发起请求。由于您已经在 setupProxy.js 中设置了代理\n\n   3.所有这些请求都会被转发到 http://localhost:4000。代理服务器将 /api 前缀从路径中移除，因为 json-server 不需要这个前缀。\n\n   4.例如，当尝试访问 http://localhost:3000/api/todos，代理将请求转发到 http://localhost:4000/todos。\n\n   在 index.js 文件中，axios 实例的 baseURL 应该设置为与开发服务器地址相同，\n   因为我们希望所有请求首先到达开发服务器，然后由它代理到 json-server。\n   所以即使 json-server 运行在 4000 端口，您的 axios 实例应该保持 baseURL 为 http://localhost:3000/api/，以利用开发服务器的代理功能。\n\n   这里的 /api 是一个约定俗成的路径\n   所有通过这个 axios 实例发出的 HTTP 请求都会自动附加这个前缀\n   这些请求是应用程序的 API 请求，不是普通的页面请求。\n   这有助于在开发服务器上设置代理规则，因为我们可以指定所有匹配 /api 路径的请求都应该被代理到另一个服务（在我们代码中是 json-server）\n */","map":{"version":3,"names":["React","ReactDOM","App","RequestProvider","axios","jsxDEV","_jsxDEV","axiosInstance","create","baseURL","root","createRoot","document","getElementById","render","StrictMode","children","value","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/class/CSC436/week5/hw3/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RequestProvider } from 'react-request-hook';\nimport axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:4000/api/',\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <RequestProvider value={axiosInstance}>\n      <App />\n    </RequestProvider>\n  </React.StrictMode>\n);\n\n\n/**\n   1.前端开发服务器监听 http://localhost:3000。即React 应用在浏览器中通过这个地址访问。\n\n   2.当 React 应用需要与后端 API 交互时，会向 /api 路径发起请求。由于您已经在 setupProxy.js 中设置了代理\n\n   3.所有这些请求都会被转发到 http://localhost:4000。代理服务器将 /api 前缀从路径中移除，因为 json-server 不需要这个前缀。\n\n   4.例如，当尝试访问 http://localhost:3000/api/todos，代理将请求转发到 http://localhost:4000/todos。\n\n   在 index.js 文件中，axios 实例的 baseURL 应该设置为与开发服务器地址相同，\n   因为我们希望所有请求首先到达开发服务器，然后由它代理到 json-server。\n   所以即使 json-server 运行在 4000 端口，您的 axios 实例应该保持 baseURL 为 http://localhost:3000/api/，以利用开发服务器的代理功能。\n\n   这里的 /api 是一个约定俗成的路径\n   所有通过这个 axios 实例发出的 HTTP 请求都会自动附加这个前缀\n   这些请求是应用程序的 API 请求，不是普通的页面请求。\n   这有助于在开发服务器上设置代理规则，因为我们可以指定所有匹配 /api 路径的请求都应该被代理到另一个服务（在我们代码中是 json-server）\n */"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,eAAe,QAAQ,oBAAoB;AACpD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGT,QAAQ,CAACU,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTR,OAAA,CAACN,KAAK,CAACe,UAAU;EAAAC,QAAA,eACfV,OAAA,CAACH,eAAe;IAACc,KAAK,EAAEV,aAAc;IAAAS,QAAA,eACpCV,OAAA,CAACJ,GAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACF,CACpB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}