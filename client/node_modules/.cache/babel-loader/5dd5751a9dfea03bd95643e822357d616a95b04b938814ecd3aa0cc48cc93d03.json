{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week9\\\\lab5\\\\client\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useResource } from \"react-request-hook\";\nimport { StateContext } from \"../auxiliary/Context\";\nimport { setView, loginUser } from \"../auxiliary/Action\";\nimport '../extraStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const {\n    dispatch\n  } = useContext(StateContext);\n  const [user, setUser] = useState({\n    name: \"\",\n    password: \"\"\n  });\n  const [errorMsg, setErrorMsg] = useState(\"\");\n\n  //1. Create hooks, build front-end and back-end routes, define routes and methods, \n  //and provide parsers for username, password, when passed to the backend\n  const [response, login] = useResource((username, password) => ({\n    url: \"/auth/login\",\n    method: \"post\",\n    data: {\n      username,\n      password\n    }\n  }));\n\n  // 3.Obtain the JSON parsing body passed from the backend, obtain the fields in the data, \n  // either deconstruct the data and pass it to dispatch while saving the global variable state in useContext, or pop up an error message\n  useEffect(() => {\n    if (response && response.isLoading === false) {\n      // check we get error or data\n      if (response.error) {\n        // if we encouter error, print it out to the console and alert user\n        console.error(response.error);\n        setErrorMsg(response.error.data.error + 'Please check your username and password and try again.');\n      } else if (response && response.data) {\n        // taclke the situation of register successfully\n        console.log(\"Login:\", response.data);\n        const {\n          username,\n          access_token\n        } = response.data;\n        //The access token generated and passed from the backend is then passed to the dispatch to store our access_ token, \n        //so that after logging in, we can use this request header for verification to perform post operations\n        dispatch(loginUser(username, access_token));\n        dispatch(setView('homepage'));\n      }\n    }\n  }, [response, dispatch]);\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setUser(prevValue => {\n      return {\n        ...prevValue,\n        [name]: value\n      };\n    });\n  }\n\n  //2. Obtain the username and password entered by the user from the input box and pass them to the backend\n  function handleLogin(event) {\n    event.preventDefault();\n    login(user.name, user.password);\n  }\n  function handleRegisterClick() {\n    dispatch(setView('register'));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginPage-container\",\n    children: [errorMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loginPage-error\",\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"loginPage-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginPage-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"loginPage-input\",\n          onChange: handleChange,\n          name: \"name\",\n          value: user.name,\n          placeholder: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"loginPage-input\",\n          onChange: handleChange,\n          name: \"password\",\n          type: \"password\",\n          value: user.password,\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginPage-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"loginPage-submitBtn\",\n          type: \"button\",\n          disabled: !user.name || !user.password,\n          onClick: handleLogin,\n          children: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"loginPage-registerBtn\",\n          type: \"button\",\n          onClick: handleRegisterClick,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n_s(LoginPage, \"tJSvUohCpwnq1xstt9lTeEtSXzM=\", false, function () {\n  return [useResource];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useResource","StateContext","setView","loginUser","jsxDEV","_jsxDEV","LoginPage","_s","dispatch","user","setUser","name","password","errorMsg","setErrorMsg","response","login","username","url","method","data","isLoading","error","console","log","access_token","handleChange","event","value","target","prevValue","handleLogin","preventDefault","handleRegisterClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","type","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week9/lab5/client/src/pages/LoginPage.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useResource } from \"react-request-hook\";\nimport { StateContext } from \"../auxiliary/Context\"; \nimport { setView, loginUser} from \"../auxiliary/Action\"; \nimport '../extraStyles.css'\n\nexport default function LoginPage() {\n\n    const { dispatch } = useContext(StateContext);\n\n    const [user, setUser] = useState({\n      name: \"\",\n      password: \"\"\n    });\n\n    const [errorMsg, setErrorMsg] = useState(\"\");\n\n    //1. Create hooks, build front-end and back-end routes, define routes and methods, \n    //and provide parsers for username, password, when passed to the backend\n    const [response, login] = useResource((username, password) => ({\n      url: \"/auth/login\",\n      method: \"post\",\n      data: { username, password },\n    }));\n\n    // 3.Obtain the JSON parsing body passed from the backend, obtain the fields in the data, \n    // either deconstruct the data and pass it to dispatch while saving the global variable state in useContext, or pop up an error message\n    useEffect(() => {\n      if(response && response.isLoading === false){\n        // check we get error or data\n        if (response.error) {\n          // if we encouter error, print it out to the console and alert user\n          console.error(response.error);\n          setErrorMsg(response.error.data.error + 'Please check your username and password and try again.');\n\n        } else if (response && response.data) {\n          // taclke the situation of register successfully\n          console.log(\"Login:\", response.data);\n          const { username, access_token } = response.data;\n          //The access token generated and passed from the backend is then passed to the dispatch to store our access_ token, \n          //so that after logging in, we can use this request header for verification to perform post operations\n          dispatch(loginUser(username, access_token));\n          dispatch(setView('homepage'));\n        }\n      }\n    }, [response, dispatch])\n\n\n    function handleChange(event) {\n      const { name, value } = event.target;\n  \n      setUser(prevValue => {\n        return {\n          ...prevValue,\n          [name]: value\n        };\n      });\n    }\n\n    //2. Obtain the username and password entered by the user from the input box and pass them to the backend\n    function handleLogin(event) {\n      event.preventDefault();\n\n      login(user.name, user.password);\n    }\n\n    function handleRegisterClick() {\n      dispatch(setView('register'));\n    }\n    \n  \n    return (\n      <div className=\"loginPage-container\">\n        {/* <h1>Hello {user.name}</h1> */}\n        {errorMsg && <p className=\"loginPage-error\">{errorMsg}</p>}\n        <form className=\"loginPage-form\">\n          <div className=\"loginPage-input-container\">\n            <input\n              className=\"loginPage-input\"\n              onChange={handleChange}\n              name=\"name\"\n              value={user.name}\n              placeholder=\"Username\"\n            />\n            <input\n              className=\"loginPage-input\"\n              onChange={handleChange}\n              name=\"password\"\n              type=\"password\"\n              value={user.password}\n              placeholder=\"Password\"\n            />\n          </div>\n          <div className=\"loginPage-button-container\">\n            <button className=\"loginPage-submitBtn\" type=\"button\" disabled={!user.name || !user.password} onClick={handleLogin}>Log in</button>\n            <button className=\"loginPage-registerBtn\" type=\"button\" onClick={handleRegisterClick}>Register</button>\n          </div>         \n        </form>\n\n        \n      </div>\n    );\n       \n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}