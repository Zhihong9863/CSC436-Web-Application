{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week5\\\\hw3\\\\client\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useState, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { userAndViewReducer, notesReducer } from './auxiliary/Reducer';\nimport { StateContext } from './auxiliary/Context';\nimport { addNote, deleteNote, editNote, toggleNote } from \"./auxiliary/Action\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport HomePage from \"./pages/HomePage\";\n\n//define initial state including user(username, password), posts(content, title, date)..\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  user: null,\n  posts: [],\n  currentView: 'login'\n};\nexport default function App() {\n  _s();\n  //use useResource to get the database embeded array postsp[] data\n  const [postResponse, getPosts] = useResource(() => ({\n    url: \"/posts\",\n    method: \"get\"\n  }));\n\n  //Requesting posts during component loading\n  //Empty dependency array ensures that it only runs when the component is mounted\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  /*\n    UseEffect itself does not directly render any interface, which is a side effect hook used to handle the logic of component loading, updating, and unloading.\n     Here it listens for updates to the response. Once there is data, it will call the reducer hook to update our post array. \n    This post array will be given to the note component in the homepage loop. \n    Finally, when we log in, we will directly see this data on the homepage interface\n  */\n\n  useEffect(() => {\n    if (postResponse && postResponse.data) {\n      console.log(postResponse.data);\n      dispatch({\n        type: \"FETCH_POSTS\",\n        posts: postResponse.data.reverse()\n      });\n    }\n  }, [postResponse]);\n  const mainReducer = (state, action) => {\n    const updatedUserAndView = userAndViewReducer(state, action);\n    return {\n      ...updatedUserAndView,\n      posts: notesReducer(state.posts, action)\n    };\n  };\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n  const {\n    user,\n    posts: notes,\n    currentView\n  } = state;\n\n  //Modal Window Status\n  const [showModal, setShowModal] = useState(false);\n\n  //Use useEffect to check for changes in user status\n  useEffect(() => {\n    if (user) {\n      setShowModal(true);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n      value: {\n        state,\n        dispatch\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), currentView === 'login' && /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }, this), currentView === 'register' && /*#__PURE__*/_jsxDEV(RegisterPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 40\n      }, this), currentView === 'homepage' && /*#__PURE__*/_jsxDEV(HomePage, {\n        notes: notes,\n        addNote: note => dispatch(addNote(note)),\n        deleteNote: id => dispatch(deleteNote(id)),\n        editNote: attributes => dispatch(editNote(attributes)),\n        toggleNote: id => dispatch(toggleNote(id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 40\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), showModal && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [\"Welcome back, \", user.name, \"!\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowModal(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"baISZrpom8ykxwaZTVTKKGzMbOg=\", false, function () {\n  return [useResource];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useReducer","useState","useEffect","useResource","userAndViewReducer","notesReducer","StateContext","addNote","deleteNote","editNote","toggleNote","Header","Footer","LoginPage","RegisterPage","HomePage","jsxDEV","_jsxDEV","initialState","user","posts","currentView","App","_s","postResponse","getPosts","url","method","data","console","log","dispatch","type","reverse","mainReducer","state","action","updatedUserAndView","notes","showModal","setShowModal","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","note","id","attributes","className","name","onClick","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week5/hw3/client/src/App.jsx"],"sourcesContent":["import React, {useReducer, useState, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { userAndViewReducer, notesReducer } from './auxiliary/Reducer';\nimport { StateContext } from './auxiliary/Context'\nimport { addNote, deleteNote, editNote, toggleNote } from \"./auxiliary/Action\"; \nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\"; \nimport HomePage from \"./pages/HomePage\";\n\n//define initial state including user(username, password), posts(content, title, date)..\nexport const initialState = {\n  user: null,\n  posts: [],\n  currentView: 'login',\n};\n\n\nexport default function App() {\n\n  //use useResource to get the database embeded array postsp[] data\n  const [postResponse, getPosts] = useResource(() => ({\n    url: \"/posts\",\n    method: \"get\",\n  })); \n  \n  //Requesting posts during component loading\n  //Empty dependency array ensures that it only runs when the component is mounted\n  useEffect(() => {\n    getPosts();\n  }, []);\n  \n  /*\n    UseEffect itself does not directly render any interface, which is a side effect hook used to handle the logic of component loading, updating, and unloading.\n\n    Here it listens for updates to the response. Once there is data, it will call the reducer hook to update our post array. \n    This post array will be given to the note component in the homepage loop. \n    Finally, when we log in, we will directly see this data on the homepage interface\n  */\n\n  useEffect(() => {\n    if (postResponse && postResponse.data) {\n      console.log(postResponse.data); \n      dispatch({ type: \"FETCH_POSTS\", posts: postResponse.data.reverse() });\n    }\n  }, [postResponse]);\n\n\n\n  const mainReducer = (state, action) => {\n    const updatedUserAndView = userAndViewReducer(state, action);\n    return {\n      ...updatedUserAndView,\n      posts: notesReducer(state.posts, action),\n    };\n  };\n\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n\n  const { user, posts: notes, currentView } = state;\n\n  //Modal Window Status\n  const [showModal, setShowModal] = useState(false);\n\n  //Use useEffect to check for changes in user status\n  useEffect(() => {\n    if (user) {\n      setShowModal(true);\n    }\n  }, [user]);\n\n\n  return(\n    <div>\n      <StateContext.Provider value={{ state, dispatch }}>\n\n        <Header />\n        {currentView === 'login' && <LoginPage />}\n        {currentView === 'register' && <RegisterPage />}\n        {currentView === 'homepage' && <HomePage \n          notes={notes} \n          addNote={(note) => dispatch(addNote(note))}\n          deleteNote={(id) => dispatch(deleteNote(id))}\n          editNote={(attributes) => dispatch(editNote(attributes))}\n          toggleNote={(id) => dispatch(toggleNote(id))}\n        />}\n        <Footer />\n\n        {/* New Modal Window */}\n        {showModal && (\n          <div className=\"modal\">\n            <div className=\"modal-content\">\n              Welcome back, {user.name}!\n              <button onClick={() => setShowModal(false)}>Close</button>\n            </div>\n          </div>\n        )}\n\n      </StateContext.Provider>\n    </div>\n  )\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}