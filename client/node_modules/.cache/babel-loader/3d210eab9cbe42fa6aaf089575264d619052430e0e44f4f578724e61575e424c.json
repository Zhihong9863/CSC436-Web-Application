{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week5\\\\hw3\\\\client\\\\src\\\\components\\\\Note.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedNote, setEditedNote] = useState({\n    title: props.title,\n    content: props.content\n  });\n  const [deleteResponse, deleteNote] = useResource(id => ({\n    url: `/posts/${id}`,\n    method: 'delete'\n  }));\n  const [toggleResponse, toggleTodo] = useResource(({\n    id,\n    isCompleted,\n    completedDate\n  }) => ({\n    url: `/posts/${id}`,\n    method: 'patch',\n    data: {\n      isCompleted,\n      completedDate\n    }\n  }));\n  const [editResponse, editTodo] = useResource(({\n    id,\n    title,\n    content,\n    createdDate,\n    isCompleted,\n    completedDate\n  }) => ({\n    url: `/posts/${id}`,\n    method: 'patch',\n    data: {\n      title,\n      content,\n      createdDate,\n      isCompleted,\n      completedDate\n    }\n  }));\n  useEffect(() => {\n    if (deleteResponse && deleteResponse.data && deleteResponse.isLoading === false) {\n      props.onDelete(deleteResponse.data.id);\n    } else if (deleteResponse && deleteResponse.error) {\n      console.error(deleteResponse.error);\n      window.alert(deleteResponse.error.data);\n    }\n  }, [deleteResponse]);\n  useEffect(() => {\n    if (toggleResponse && toggleResponse.data && toggleResponse.isLoading === false) {\n      props.onToggle(toggleResponse.data.id);\n    } else if (toggleResponse && toggleResponse.error) {\n      console.error(toggleResponse.error);\n      window.alert(toggleResponse.data);\n    }\n  }, [toggleResponse]);\n  useEffect(() => {\n    if (editResponse && editResponse.data) {\n      console.log(editResponse.data);\n      props.onEdit(editResponse.data);\n    }\n    if (editResponse && editResponse.error) {\n      console.error(editResponse.error);\n      window.alert(editResponse.error.data);\n    }\n  }, [toggleResponse]);\n\n  /*\n  The behavior of this function depends on the isEditing state. If currently in editing mode (i.e. isEditing is true),\n  It will submit the current edited note content. If it is not in edit mode, it will switch to edit mode. Each click \n  will switch the status of isEditing.\n  */\n  function handleEdit() {\n    console.log(props.id);\n    if (isEditing) {\n      // props.onEdit({ ...editedNote, \n      //   id: props.id,\n      //   createdDate: props.createdDate,\n      //   isCompleted: props.isCompleted,         \n      //   completedDate: props.completedDate \n      //  });\n\n      //  editTodo(props.id, props.title, props.content, props.createdDate, props.isCompleted, props.completedDate);\n      editTodo({\n        id: props.id,\n        title: editedNote.title,\n        // use the edited title from the state\n        content: editedNote.content,\n        // use the edited content from the state\n        createdDate: props.createdDate,\n        isCompleted: props.isCompleted,\n        completedDate: props.completedDate\n      });\n    }\n    setIsEditing(!isEditing);\n  }\n  function handleDelete() {\n    console.log(props.id);\n    deleteNote(props.id);\n    // props.onDelete(props.id);\n  }\n\n  function handleCheckboxChange() {\n    console.log(props.id);\n    const newIsCompleted = !props.isCompleted;\n    const newCompletedDate = newIsCompleted ? new Date().toLocaleString() : null;\n    toggleTodo({\n      id: props.id,\n      isCompleted: newIsCompleted,\n      completedDate: newCompletedDate\n    });\n\n    // props.onToggle(props.id);\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setEditedNote(prevEditNote => {\n      return {\n        ...prevEditNote,\n        [name]: value\n      };\n    });\n  }\n\n  /**\n   * HandleEdit is a switching function that determines whether to save notes or switch to editing mode based on the current state \n   * of isEditing. When the state of the React component (in this case isEditing) changes, the component will be re rendered. \n   * Therefore, when the handleEdit function is called and the value of isEditing is changed, it will cause the component to re render. \n   * That is, re-entering the return section\n   */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"title\",\n        value: editedNote.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"content\",\n        value: editedNote.content,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: props.isCompleted,\n            onChange: handleCheckboxChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), \"Completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"createdDate\",\n        children: [\"CreateTime: \", props.createdDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), props.isCompleted && /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"completedDate\",\n        children: [\"Completed: \", props.completedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"edit-btn\",\n      onClick: handleEdit,\n      children: [\" \", isEditing ? \"SAVE\" : \"EDIT\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-btn\",\n      onClick: handleDelete,\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(Note, \"ueMOvFiz2P9ChvALh/o3VgIylK0=\", false, function () {\n  return [useResource, useResource, useResource];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useState","useEffect","useResource","jsxDEV","_jsxDEV","Fragment","_Fragment","Note","props","_s","isEditing","setIsEditing","editedNote","setEditedNote","title","content","deleteResponse","deleteNote","id","url","method","toggleResponse","toggleTodo","isCompleted","completedDate","data","editResponse","editTodo","createdDate","isLoading","onDelete","error","console","window","alert","onToggle","log","onEdit","handleEdit","handleDelete","handleCheckboxChange","newIsCompleted","newCompletedDate","Date","toLocaleString","handleChange","event","name","value","target","prevEditNote","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onClick","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week5/hw3/client/src/components/Note.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { useResource } from 'react-request-hook';\n\n\nfunction Note(props) {\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const [editedNote, setEditedNote] = useState({\n    title: props.title,\n    content: props.content\n  });\n\n  const [deleteResponse, deleteNote] = useResource((id) => ({\n    url: `/posts/${id}`,\n    method: 'delete'\n  }));\n\n  const [toggleResponse, toggleTodo] = useResource(({ id, isCompleted, completedDate }) => ({\n    url: `/posts/${id}`,\n    method: 'patch',\n    data: { isCompleted, completedDate }\n  }));\n\n  const [editResponse, editTodo] = useResource(({ id, title, content, createdDate, isCompleted, completedDate }) => ({\n    url: `/posts/${id}`,\n    method: 'patch',\n    data: { title, content, createdDate, isCompleted, completedDate }\n  }));\n\n  useEffect(() => {\n    if(deleteResponse && deleteResponse.data && deleteResponse.isLoading === false) {\n      props.onDelete(deleteResponse.data.id);\n    }\n    else if (deleteResponse && deleteResponse.error) {\n      console.error(deleteResponse.error);\n      window.alert(deleteResponse.error.data);\n    }\n  }, [deleteResponse]);\n\n  useEffect(() => {\n    if(toggleResponse && toggleResponse.data && toggleResponse.isLoading === false) {\n      props.onToggle(toggleResponse.data.id);\n    }\n    else if (toggleResponse && toggleResponse.error) {\n      console.error(toggleResponse.error);\n      window.alert(toggleResponse.data);\n    }\n  }, [toggleResponse]);\n\n  useEffect(() => {\n    if(editResponse && editResponse.data){\n      console.log(editResponse.data);\n      props.onEdit(editResponse.data);\n    }\n    if (editResponse && editResponse.error){\n      console.error(editResponse.error);\n      window.alert(editResponse.error.data);\n    }\n  }, [toggleResponse]);\n\n\n  /*\n  The behavior of this function depends on the isEditing state. If currently in editing mode (i.e. isEditing is true),\n  It will submit the current edited note content. If it is not in edit mode, it will switch to edit mode. Each click \n  will switch the status of isEditing.\n  */\n  function handleEdit() {\n    console.log(props.id);\n    if (isEditing) {\n        // props.onEdit({ ...editedNote, \n        //   id: props.id,\n        //   createdDate: props.createdDate,\n        //   isCompleted: props.isCompleted,         \n        //   completedDate: props.completedDate \n        //  });\n\n        //  editTodo(props.id, props.title, props.content, props.createdDate, props.isCompleted, props.completedDate);\n        editTodo({\n          id: props.id,\n          title: editedNote.title, // use the edited title from the state\n          content: editedNote.content, // use the edited content from the state\n          createdDate: props.createdDate,\n          isCompleted: props.isCompleted,\n          completedDate: props.completedDate\n        });\n\n    }\n    setIsEditing(!isEditing);\n  }\n\n\n  function handleDelete() {\n    console.log(props.id);\n    \n    deleteNote(props.id);\n    // props.onDelete(props.id);\n  }\n\n\n  function handleCheckboxChange() {\n    console.log(props.id);\n\n    const newIsCompleted = !props.isCompleted;\n    const newCompletedDate = newIsCompleted ? new Date().toLocaleString() : null;\n\n    toggleTodo({\n      id: props.id,\n      isCompleted: newIsCompleted,\n      completedDate: newCompletedDate\n    });\n\n    // props.onToggle(props.id);\n  }\n\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setEditedNote(prevEditNote => {\n      return {\n        ...prevEditNote,\n        [name]: value\n      };\n    });\n  }\n\n\n  /**\n   * HandleEdit is a switching function that determines whether to save notes or switch to editing mode based on the current state \n   * of isEditing. When the state of the React component (in this case isEditing) changes, the component will be re rendered. \n   * Therefore, when the handleEdit function is called and the value of isEditing is changed, it will cause the component to re render. \n   * That is, re-entering the return section\n   */\n\n  \n  return (\n    <div className=\"note\">\n        {isEditing ? (\n            <div>\n                <input \n                    name=\"title\"\n                    value={editedNote.title}\n                    onChange={handleChange}\n                />\n                <textarea\n                    name=\"content\" \n                    value={editedNote.content}\n                    onChange={handleChange}\n                />\n            </div>\n        ) : (\n            <>\n                <h1>{props.title}</h1>\n                <p>{props.content}</p>\n\n                {/* Checkbox for completion status */}\n                <div className=\"checkbox-container\">\n                  <label>\n                    <input \n                      type=\"checkbox\" \n                      checked={props.isCompleted} \n                      onChange={handleCheckboxChange} \n                    />\n                    Completed\n                  </label>\n                </div>\n\n                <h2 className=\"createdDate\">CreateTime: {props.createdDate}</h2>\n                {props.isCompleted && <h2 className=\"completedDate\">Completed: {props.completedDate}</h2>}\n                \n            </>\n        )}\n        <button className=\"edit-btn\" onClick={handleEdit}> {isEditing ?  \"SAVE\" : \"EDIT\"}</button>\n        <button className=\"delete-btn\" onClick={handleDelete}>DELETE</button>\n    </div>\n  );\n\n}\n\nexport default Note;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}