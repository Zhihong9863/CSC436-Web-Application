{"ast":null,"code":"var _jsxFileName = \"/Users/hezhihong/csc436/hw2/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useReducer } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Note from \"./components/Note\";\nimport CreateArea from \"./components/CreateArea\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport HeaderHome from \"./components/HeaderHome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\n  const [notes, dispatch] = useReducer(notesReducer, []);\n  function notesReducer(state, action) {\n    switch (action.type) {\n      case 'ADD_NOTE':\n        return [...state, action.newNote];\n      case 'DELETE_NOTE':\n        return state.filter(note => note.id !== action.id);\n      case 'EDIT_NOTE':\n        return state.map(note => {\n          if (note.id === action.noteItem.id) {\n            return action.noteItem;\n          } else {\n            return note;\n          }\n        });\n      default:\n        return state;\n    }\n  }\n  function handleUserLogin(username) {\n    setLoggedInUser(username);\n  }\n  function addNote(note) {\n    dispatch({\n      type: 'ADD_NOTE',\n      newNote: note\n    });\n  }\n  function deleteNote(id) {\n    dispatch({\n      type: 'DELETE_NOTE',\n      id: id\n    });\n  }\n  function editNote(attributes) {\n    dispatch({\n      type: 'EDIT_NOTE',\n      noteItem: attributes\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LoginPage, {\n              onLogin: handleUserLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/register\",\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RegisterPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/homepage\",\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(HeaderHome, {\n              author: loggedInUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CreateArea, {\n              onAdd: addNote\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), notes.map(noteItem => {\n              return /*#__PURE__*/_jsxDEV(Note, {\n                id: noteItem.id,\n                title: noteItem.title,\n                content: noteItem.content,\n                createdDate: noteItem.createdDate,\n                isCompleted: noteItem.isCompleted,\n                completedDate: noteItem.completedDate,\n                onDelete: deleteNote,\n                onEdit: editNote\n              }, noteItem.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/login\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LeTCiQo3hVbJTY9evGGIKiHU8W4=\");\n_c = App;\nexport default App;\n//here I define a simple database to store user information although homework doesn't need this requirment.\nexport const mockDB = [];\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useReducer","BrowserRouter","Router","Route","Routes","Navigate","Header","Footer","Note","CreateArea","LoginPage","RegisterPage","HeaderHome","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","loggedInUser","setLoggedInUser","notes","dispatch","notesReducer","state","action","type","newNote","filter","note","id","map","noteItem","handleUserLogin","username","addNote","deleteNote","editNote","attributes","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","author","onAdd","title","content","createdDate","isCompleted","completedDate","onDelete","onEdit","to","replace","_c","mockDB","$RefreshReg$"],"sources":["/Users/hezhihong/csc436/hw2/src/App.jsx"],"sourcesContent":["import React, {useState, useReducer} from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Note from \"./components/Note\";\nimport CreateArea from \"./components/CreateArea\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\"; \nimport HeaderHome from \"./components/HeaderHome\";\n\nfunction App() {\n\n  const [loggedInUser, setLoggedInUser] = useState(\"\");\n\n  const [notes, dispatch] = useReducer(notesReducer, []);\n\n  function notesReducer(state, action) {\n    switch(action.type) {\n\n      case 'ADD_NOTE':\n        return [...state, action.newNote];\n\n      case 'DELETE_NOTE':\n        return state.filter(note => note.id !== action.id);\n\n      case 'EDIT_NOTE':\n        return state.map(note => {\n          if (note.id === action.noteItem.id) {\n            return action.noteItem;\n          } else {\n            return note;\n          }\n        });\n\n      default:\n        return state;\n\n    }\n  }\n\n  function handleUserLogin(username) {\n    setLoggedInUser(username);\n  }\n\n  function addNote(note) {\n    dispatch({\n      type: 'ADD_NOTE',\n      newNote: note\n    });\n  }\n\n  function deleteNote(id) {\n    dispatch({\n      type: 'DELETE_NOTE',\n      id: id\n    });\n  }\n\n  function editNote(attributes) {\n    dispatch({\n      type: 'EDIT_NOTE',\n      noteItem: attributes\n    });\n  }\n\n  return (\n    <Router>\n      <div>\n        \n        <Routes>\n          <Route path=\"/login\" element={\n            <>\n              <Header />\n              <LoginPage onLogin={handleUserLogin}/>\n            </>\n\n          } />\n\n          <Route path=\"/register\" element={\n            <>\n              <Header />\n              <RegisterPage />\n            </>         \n          } />\n\n\n          <Route path=\"/homepage\" element={\n            <>\n              <HeaderHome author={loggedInUser} />\n              <CreateArea onAdd={addNote} />\n              {notes.map((noteItem) => {\n                return (\n                  <Note\n                    key={noteItem.id}\n                    id={noteItem.id}\n                    title={noteItem.title}\n                    content={noteItem.content}\n                    createdDate={noteItem.createdDate}\n                    isCompleted={noteItem.isCompleted}\n                    completedDate={noteItem.completedDate}\n                    onDelete={deleteNote}\n                    onEdit={editNote}\n                  />\n                );\n              })}\n            </>\n          } />\n          <Route path=\"/\" element={<Navigate to=\"/login\" replace />} />\n        </Routes>\n\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n//here I define a simple database to store user information although homework doesn't need this requirment.\nexport const mockDB = [];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}