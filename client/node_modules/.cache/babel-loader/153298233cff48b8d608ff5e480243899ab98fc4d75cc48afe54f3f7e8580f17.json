{"ast":null,"code":"var _jsxFileName = \"C:\\\\class\\\\CSC436\\\\week9\\\\lab5\\\\client\\\\src\\\\components\\\\Note.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { StateContext } from \"../auxiliary/Context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Note(props) {\n  _s();\n  console.log(props.completedDate);\n  const {\n    state\n  } = useContext(StateContext);\n  const {\n    user\n  } = state;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedNote, setEditedNote] = useState({\n    title: props.title,\n    content: props.content\n  });\n\n  //any operations in our Note.jsx needs to know the exact 'id' in their params, so that's why I need the backend's 'id' when post a new note\n  const [deleteResponse, deleteNote] = useResource(id => ({\n    url: `/post/${id}`,\n    method: 'delete',\n    headers: {\n      Authorization: `${user.access_token}`\n    }\n  }));\n  const [toggleResponse, toggleTodo] = useResource(({\n    id,\n    isCompleted,\n    completedDate\n  }) => ({\n    url: `/post/${id}`,\n    method: 'patch',\n    headers: {\n      Authorization: `${user.access_token}`\n    },\n    data: {\n      isCompleted,\n      completedDate\n    }\n  }));\n  const [editResponse, editTodo] = useResource(({\n    id,\n    title,\n    content,\n    createdDate,\n    isCompleted,\n    completedDate\n  }) => ({\n    url: `/post/${id}`,\n    method: 'patch',\n    headers: {\n      Authorization: `${user.access_token}`\n    },\n    data: {\n      title,\n      content,\n      createdDate,\n      isCompleted,\n      completedDate\n    }\n  }));\n\n  // Because the backend database has been deleted, response.data is empty and does not need to be listened to. \n  // It can be directly deleted under the original function using props. onDelete (props. id);\n\n  // useEffect(() => {\n  //   if(deleteResponse && deleteResponse.data) {\n  //     console.log(deleteResponse.data);\n  //     props.onDelete(deleteResponse.data);\n  //   }\n  //   else if (deleteResponse && deleteResponse.error) {\n  //     console.error(deleteResponse.error);\n  //     window.alert(deleteResponse.error.data);\n  //   }\n  // }, [deleteResponse]);\n\n  //Listen to the execution status of the backend of the useResource, \n  //and execute these userReducer contents on the front-end after being successfully added to the backend database\n  // useEffect(() => {\n  //   if(toggleResponse && toggleResponse.data && toggleResponse.isLoading === false) {\n  //     console.log(toggleResponse.data);\n  //     props.onToggle(toggleResponse.data.id, toggleResponse.data.completedDate);\n  //   }\n  //   else if (toggleResponse && toggleResponse.error) {\n  //     console.error(toggleResponse.error);\n  //     window.alert(toggleResponse.error.data);\n  //   }\n  // }, [toggleResponse]);\n\n  useEffect(() => {\n    if (editResponse && editResponse.data && editResponse.isLoading === false) {\n      console.log(editResponse.data);\n      props.onEdit(editResponse.data);\n    }\n    if (editResponse && editResponse.error) {\n      console.error(editResponse.error);\n      window.alert(editResponse.error.data);\n    }\n  }, [editResponse]);\n\n  /*\n  The behavior of this function depends on the isEditing state. If currently in editing mode (i.e. isEditing is true),\n  It will submit the current edited note content. If it is not in edit mode, it will switch to edit mode. Each click \n  will switch the status of isEditing.\n  */\n  function handleEdit() {\n    if (isEditing) {\n      editTodo({\n        id: props.id,\n        title: editedNote.title,\n        // use the edited title from the state\n        content: editedNote.content,\n        // use the edited content from the state\n        createdDate: props.createdDate,\n        isCompleted: props.isCompleted,\n        completedDate: props.completedDate\n      });\n    }\n    setIsEditing(!isEditing);\n  }\n  function handleDelete() {\n    console.log(props.id);\n    deleteNote(props.id);\n    props.onDelete(props.id);\n  }\n  function handleCheckboxChange() {\n    console.log(props.id);\n    const newIsCompleted = !props.isCompleted;\n    const newCompletedDate = newIsCompleted ? new Date().toISOString() : null;\n    toggleTodo({\n      id: props.id,\n      isCompleted: newIsCompleted,\n      completedDate: newCompletedDate\n    });\n    props.onToggle(props.id, newCompletedDate);\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setEditedNote(prevEditNote => {\n      return {\n        ...prevEditNote,\n        [name]: value\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"title\",\n        value: editedNote.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"content\",\n        value: editedNote.content,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: props.isCompleted,\n            onChange: handleCheckboxChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this), \"Completed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"createdDate\",\n        children: [\"CreateTime: \", props.createdDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), props.isCompleted && /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"completedDate\",\n        children: [\"Completed: \", props.completedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"edit-btn\",\n      onClick: handleEdit,\n      children: [\" \", isEditing ? \"SAVE\" : \"EDIT\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-btn\",\n      onClick: handleDelete,\n      children: \"DELETE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n_s(Note, \"XSS2dUJl68jkdAl6EMrPAc4Q1a8=\", false, function () {\n  return [useResource, useResource, useResource];\n});\n_c = Note;\nexport default Note;\nvar _c;\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useResource","StateContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Note","props","_s","console","log","completedDate","state","user","isEditing","setIsEditing","editedNote","setEditedNote","title","content","deleteResponse","deleteNote","id","url","method","headers","Authorization","access_token","toggleResponse","toggleTodo","isCompleted","data","editResponse","editTodo","createdDate","isLoading","onEdit","error","window","alert","handleEdit","handleDelete","onDelete","handleCheckboxChange","newIsCompleted","newCompletedDate","Date","toISOString","onToggle","handleChange","event","name","value","target","prevEditNote","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onClick","_c","$RefreshReg$"],"sources":["C:/class/CSC436/week9/lab5/client/src/components/Note.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useResource } from 'react-request-hook';\nimport { StateContext } from \"../auxiliary/Context\";\n\n\nfunction Note(props) {\n\n  console.log(props.completedDate);\n\n  const { state } = useContext(StateContext);\n  const { user } = state;\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  const [editedNote, setEditedNote] = useState({\n    title: props.title,\n    content: props.content\n  });\n\n  //any operations in our Note.jsx needs to know the exact 'id' in their params, so that's why I need the backend's 'id' when post a new note\n  const [deleteResponse, deleteNote] = useResource((id) => ({\n    url: `/post/${id}`,\n    method: 'delete',\n    headers: { Authorization: `${user.access_token}` }\n  }));\n\n  const [toggleResponse, toggleTodo] = useResource(({ id, isCompleted, completedDate }) => ({\n    url: `/post/${id}`,\n    method: 'patch',\n    headers: { Authorization: `${user.access_token}` },\n    data: { isCompleted, completedDate }\n  }));\n\n  const [editResponse, editTodo] = useResource(({ id, title, content, createdDate, isCompleted, completedDate }) => ({\n    url: `/post/${id}`,\n    method: 'patch',\n    headers: { Authorization: `${user.access_token}` },\n    data: { title, content, createdDate, isCompleted, completedDate }\n  }));\n\n  \n  // Because the backend database has been deleted, response.data is empty and does not need to be listened to. \n  // It can be directly deleted under the original function using props. onDelete (props. id);\n\n  // useEffect(() => {\n  //   if(deleteResponse && deleteResponse.data) {\n  //     console.log(deleteResponse.data);\n  //     props.onDelete(deleteResponse.data);\n  //   }\n  //   else if (deleteResponse && deleteResponse.error) {\n  //     console.error(deleteResponse.error);\n  //     window.alert(deleteResponse.error.data);\n  //   }\n  // }, [deleteResponse]);\n\n   \n  //Listen to the execution status of the backend of the useResource, \n  //and execute these userReducer contents on the front-end after being successfully added to the backend database\n  // useEffect(() => {\n  //   if(toggleResponse && toggleResponse.data && toggleResponse.isLoading === false) {\n  //     console.log(toggleResponse.data);\n  //     props.onToggle(toggleResponse.data.id, toggleResponse.data.completedDate);\n  //   }\n  //   else if (toggleResponse && toggleResponse.error) {\n  //     console.error(toggleResponse.error);\n  //     window.alert(toggleResponse.error.data);\n  //   }\n  // }, [toggleResponse]);\n\n  useEffect(() => {\n    if(editResponse && editResponse.data && editResponse.isLoading === false){\n      console.log(editResponse.data);\n      props.onEdit(editResponse.data);\n    }\n    if (editResponse && editResponse.error){\n      console.error(editResponse.error);\n      window.alert(editResponse.error.data);\n    }\n  }, [editResponse]);\n\n\n  /*\n  The behavior of this function depends on the isEditing state. If currently in editing mode (i.e. isEditing is true),\n  It will submit the current edited note content. If it is not in edit mode, it will switch to edit mode. Each click \n  will switch the status of isEditing.\n  */\n  function handleEdit() {\n\n    if (isEditing) {\n\n        editTodo({\n          id: props.id,\n          title: editedNote.title, // use the edited title from the state\n          content: editedNote.content, // use the edited content from the state\n          createdDate: props.createdDate,\n          isCompleted: props.isCompleted,\n          completedDate: props.completedDate\n        });\n\n    }\n    setIsEditing(!isEditing);\n  }\n\n\n  function handleDelete() {\n    console.log(props.id);\n    \n    deleteNote(props.id);\n    props.onDelete(props.id);\n  }\n\n\n  function handleCheckboxChange() {\n    console.log(props.id);\n\n    const newIsCompleted = !props.isCompleted;\n    const newCompletedDate = newIsCompleted ? new Date().toISOString() : null;\n\n    toggleTodo({\n      id: props.id,\n      isCompleted: newIsCompleted,\n      completedDate: newCompletedDate\n    });\n\n    props.onToggle(props.id, newCompletedDate);\n  }\n\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setEditedNote(prevEditNote => {\n      return {\n        ...prevEditNote,\n        [name]: value\n      };\n    });\n  }\n \n  return (\n    <div className=\"note\">\n        {isEditing ? (\n            <div>\n                <input \n                    name=\"title\"\n                    value={editedNote.title}\n                    onChange={handleChange}\n                />\n                <textarea\n                    name=\"content\" \n                    value={editedNote.content}\n                    onChange={handleChange}\n                />\n            </div>\n        ) : (\n            <>\n                <h1>{props.title}</h1>\n                <p>{props.content}</p>\n\n                {/* Checkbox for completion status */}\n                <div className=\"checkbox-container\">\n                  <label>\n                    <input \n                      type=\"checkbox\" \n                      checked={props.isCompleted} \n                      onChange={handleCheckboxChange} \n                    />\n                    Completed\n                  </label>\n                </div>\n\n                <h2 className=\"createdDate\">CreateTime: {props.createdDate}</h2>\n                {props.isCompleted && <h2 className=\"completedDate\">Completed: {props.completedDate}</h2>}\n                \n            </>\n        )}\n        <button className=\"edit-btn\" onClick={handleEdit}> {isEditing ?  \"SAVE\" : \"EDIT\"}</button>\n        <button className=\"delete-btn\" onClick={handleDelete}>DELETE</button>\n    </div>\n  );\n\n}\n\nexport default Note;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}